/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package base.de.datos.ejercicio01;

import static base.de.datos.ejercicio01.pedidos.r;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
/**
 *clase pedidos contiene informacion de pedidos
 * @author Erick Ramirez Churata
 * @version 3.0 Febrero 2017
 */
public final class pedidos extends javax.swing.JFrame {
/**
 * variable que crea y guarda la consulta
 */
    static public ResultSet r;
/**
 * hace invisible los botones de aceptar  y cancelar
 * @throws SQLException excepción de un tipo especifico o general sobre los
 * errores en la conexion a la base de datos
 */
    public pedidos() throws SQLException {
        initComponents();
        Aceptar.setVisible(false);
        Cancelar.setVisible(false);
        String url = "jdbc:mysql://localhost:3306/base de datos";
        String user = "root";
        String pass = "";
        Connection connection = DriverManager.getConnection(url, user, pass);
/**
 * Una conexión con una base de datos específica
 */
        Statement s = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        String query = "select * from pedidos";
        r = s.executeQuery(query);
        r.first();
        num_pedido.setText(r.getString("Num_pedido"));
        fecha.setText(r.getString("Fecha"));
/**
 * es la creacion del metodo del combo box para mostrar opciones de pedidos
 */
        connection = DriverManager.getConnection(url, user, pass);
        String query2 = "select nombre from clientes";
        ResultSet r2;
        Statement s2 = connection.createStatement();
        r2 = s2.executeQuery(query2);
        DefaultComboBoxModel value1 = new DefaultComboBoxModel();

        while (r2.next()) {
            value1.addElement(r2.getString("NOMBRE"));
        }
        cliente.setModel(value1);
        cliente.setSelectedItem(getNomCliente(r.getString("Cliente")));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        Num_pedido = new javax.swing.JLabel();
        Cliente = new javax.swing.JLabel();
        Fecha = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        num_pedido = new javax.swing.JTextField();
        fecha = new javax.swing.JTextField();
        Primero = new javax.swing.JButton();
        Siguiente = new javax.swing.JButton();
        Ultimo = new javax.swing.JButton();
        Nuevo = new javax.swing.JButton();
        Anterior = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        Aceptar = new javax.swing.JButton();
        Cancelar = new javax.swing.JButton();
        Borrar = new javax.swing.JButton();
        cliente = new javax.swing.JComboBox<>();
        Volver = new javax.swing.JButton();

        jTextField2.setText("jTextField2");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Num_pedido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Num_pedido.setText("Numero de pedido");

        Cliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Cliente.setText("Cliente");

        Fecha.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Fecha.setText("Fecha");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("PEDIDOS");

        num_pedido.setEditable(false);
        num_pedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_pedidoActionPerformed(evt);
            }
        });

        Primero.setText("Primero");
        Primero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrimeroActionPerformed(evt);
            }
        });

        Siguiente.setText("Siguiente");
        Siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteActionPerformed(evt);
            }
        });

        Ultimo.setText("Ultimo");
        Ultimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UltimoActionPerformed(evt);
            }
        });

        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });

        Anterior.setText("Anterior");
        Anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnteriorActionPerformed(evt);
            }
        });

        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        Aceptar.setText("Aceptar");
        Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarActionPerformed(evt);
            }
        });

        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });

        Borrar.setText("Borrar");
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });

        cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Cliente)
                            .addComponent(Fecha)
                            .addComponent(Num_pedido))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fecha)
                            .addComponent(num_pedido)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Primero)
                            .addComponent(Anterior))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Siguiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Ultimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Borrar, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .addComponent(Nuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(Aceptar)
                        .addGap(14, 14, 14)
                        .addComponent(Cancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Modificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Volver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Num_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(num_pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Aceptar)
                    .addComponent(Cancelar))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cliente)
                    .addComponent(cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Fecha)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Primero)
                    .addComponent(Siguiente)
                    .addComponent(Nuevo)
                    .addComponent(Modificar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Borrar)
                    .addComponent(Volver)
                    .addComponent(Anterior)
                    .addComponent(Ultimo))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   /**
 * metodo getCodFabricante nos devuelve el nombre del cliente y el codigo
 * @param nombre -nombre del cliente
 * @return codigo - codigo del cliente
 */
    public String getNifCliente(String nombre) {

        String codigo = "";

        try {
            String url = "jdbc:mysql://localhost:3306/base de datos";
            String user = "root";
            String pass = "";
            Connection connection = DriverManager.getConnection(url, user, pass);
            Statement s = connection.createStatement();
            String query2 = "select NIF FROM clientes where nombre='" + nombre + "'";
            ResultSet r2;
            r2 = s.executeQuery(query2);
            r2.first();
            codigo = r2.getString("NIF");
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        return codigo;
    }
/**
 * metodo getNomCliente coje el  NIF de cliente
 * @param NIF NIF del cliente
 * @return codigo codigo del cliente
 */
    public String getNomCliente(String NIF) {

        String nombre = "";

        try {
            String url = "jdbc:mysql://localhost:3306/base de datos";
            String user = "root";
            String pass = "";
            Connection connection = DriverManager.getConnection(url, user, pass);
            Statement s = connection.createStatement();
            String query2 = "select nombre FROM clientes where nif='" + NIF + "'";
            ResultSet r2;
            r2 = s.executeQuery(query2);
            r2.first();
            nombre = r2.getString("NOMBRE");
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nombre;
    }
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void num_pedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_pedidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_num_pedidoActionPerformed

    private void SiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteActionPerformed
         /**
         * boton para ir al siguiente accion
         */
        try {
            if (r.next()) {
                num_pedido.setText(r.getString("Num_pedido"));
                fecha.setText(r.getString("Fecha"));
                cliente.setSelectedItem(getNomCliente(r.getString("Cliente")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SiguienteActionPerformed

    private void PrimeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrimeroActionPerformed
       /**
        * boton para ir al primera accion de registro
        */
        try {
            if (r.first()) {
                num_pedido.setText(r.getString("Num_pedido"));
                fecha.setText(r.getString("Fecha"));
                cliente.setSelectedItem(getNomCliente(r.getString("Cliente")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PrimeroActionPerformed

    private void AnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnteriorActionPerformed
       /**
        * boton para ir al anterior accion de registro
        */
        try {
            if (r.previous()) {
                num_pedido.setText(r.getString("Num_pedido"));
                fecha.setText(r.getString("Fecha"));
                cliente.setSelectedItem(getNomCliente(r.getString("Cliente")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AnteriorActionPerformed

    private void UltimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UltimoActionPerformed
        /**
         * boton para ir a la ultima accion de registro
         */
        try {
            if (r.last()) {
                num_pedido.setText(r.getString("Num_pedido"));
                fecha.setText(r.getString("Fecha"));
                cliente.setSelectedItem(getNomCliente(r.getString("Cliente")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UltimoActionPerformed

    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
/**
         * boton nuevo para registrar una nueva base de datos 
         */
        try {
            Primero.setVisible(false);
            Anterior.setVisible(false);
            Siguiente.setVisible(false);
            Ultimo.setVisible(false);
            Nuevo.setVisible(false);
            Modificar.setVisible(false);
            Borrar.setVisible(false);
            Volver.setVisible(false);
            Aceptar.setVisible(true);
            Cancelar.setVisible(true);
            num_pedido.setEditable(true);
            num_pedido.setText("");
            fecha.setText("");
            cliente.setSelectedItem(r.getString("Cliente"));
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_NuevoActionPerformed

    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        /**
         * boton de modificar una accion
         */
        try {
            String vnum_pedido, vcliente, vfecha;
            vnum_pedido = num_pedido.getText();
            vfecha = fecha.getText();
            vcliente = (String) cliente.getSelectedItem();
            String nif = getNifCliente(vcliente);
            String url = "jdbc:mysql://localhost:3306/base de datos";
            String user = "root";
            String pass = "";
            Connection connection = DriverManager.getConnection(url, user, pass);
            /**
            * Una conexión con una base de datos específica
            */
            Statement s = connection.createStatement();
            String query = "update pedidos set Cliente='" + nif + "', Fecha='" + vfecha + "' WHERE Num_pedido='" + vnum_pedido + "'";
            int resultado = s.executeUpdate(query);
            r.refreshRow();
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ModificarActionPerformed

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        /**
         * boton para borrar una accion
         */
        try {
             /**
             * es un  panel de opcion para una  accion
             */
            int i = JOptionPane.showConfirmDialog(null, "El registro será eliminado ¿deseas cancelar el borrado?", "Confirmar borrado", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (i == 0); else {
                String vnum_pedido;
                vnum_pedido = num_pedido.getText();
                String url = "jdbc:mysql://localhost:3306/base de datos";
                String user = "root";
                String pass = "";
                Connection connection = DriverManager.getConnection(url, user, pass);
                 /**
            * Una conexión con una base de datos específica
            */
                Statement s = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                String query = "delete FROM pedidos WHERE Num_pedido='" + vnum_pedido + "'";
                int resultado = s.executeUpdate(query);
                String query2 = "select * from pedidos";
                r = s.executeQuery(query2);
                r.first();
                num_pedido.setText(r.getString("num_pedido"));
                fecha.setText(r.getString("fecha"));
                cliente.setSelectedItem(r.getString("CLIENTE"));

                Primero.setVisible(true);
                Siguiente.setVisible(true);
                Anterior.setVisible(true);
                Ultimo.setVisible(true);
                Modificar.setVisible(true);
                Nuevo.setVisible(true);
                Borrar.setVisible(true);
                Volver.setVisible(true);
                Cancelar.setVisible(false);
                Aceptar.setVisible(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BorrarActionPerformed

    private void AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarActionPerformed
        /**
       * boton para aceptar una accion 
       */
        try {
            String vnum_pedido, vfecha, vcliente;
            vnum_pedido = num_pedido.getText();
            vfecha = fecha.getText();
            vcliente = (String) cliente.getSelectedItem();
            String url = "jdbc:mysql://localhost:3306/base de datos";
            String user = "root";
            String pass = "";
            Connection connection = DriverManager.getConnection(url, user, pass);
            /**
            * Una conexión con una base de datos específica
            */
            Statement s = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            String query = "insert into pedidos values ('" + vnum_pedido + "','" + vfecha + "','" + getNifCliente(vcliente) + "')";
            int resultado = s.executeUpdate(query);

            Primero.setVisible(true);
            Anterior.setVisible(true);
            Siguiente.setVisible(true);
            Ultimo.setVisible(true);
            Nuevo.setVisible(true);
            Modificar.setVisible(true);
            Borrar.setVisible(true);
            Volver.setVisible(true);
            Aceptar.setVisible(false);
            Cancelar.setVisible(false);
            String query2 = "select * from pedidos";
            r = s.executeQuery(query2);
            r.refreshRow();
            r.first();
            num_pedido.setText(r.getString("Num_pedido"));
            fecha.setText(r.getString("Fecha"));
            cliente.setSelectedItem(r.getString("Cliente"));
        } catch (SQLException ex) {
            Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AceptarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
        /**
         * boton para cancelar una accion
         */
        try {
            Primero.setVisible(true);
            Anterior.setVisible(true);
            Siguiente.setVisible(true);
            Ultimo.setVisible(true);
            Nuevo.setVisible(true);
            Modificar.setVisible(true);
            Borrar.setVisible(true);
            Volver.setVisible(true);
            Aceptar.setVisible(false);
            Cancelar.setVisible(false);
            r.refreshRow();
            r.first();
            num_pedido.setText(r.getString("Num_pedido"));
            fecha.setText(r.getString("Fecha"));
            cliente.setSelectedItem(r.getString("Cliente"));
            num_pedido.setEditable(false);
        } catch (SQLException ex) {
            Logger.getLogger(fabricantes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CancelarActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
       /**
         * boton volver paar ir al panel de menu
         */
        Menu ped = new Menu();
        ped.setLocationRelativeTo(null);
        this.setVisible(false);
        ped.setVisible(false);
    }//GEN-LAST:event_VolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pedidos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new pedidos().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(pedidos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aceptar;
    private javax.swing.JButton Anterior;
    private javax.swing.JButton Borrar;
    private javax.swing.JButton Cancelar;
    private javax.swing.JLabel Cliente;
    private javax.swing.JLabel Fecha;
    private javax.swing.JButton Modificar;
    private javax.swing.JButton Nuevo;
    private javax.swing.JLabel Num_pedido;
    private javax.swing.JButton Primero;
    private javax.swing.JButton Siguiente;
    private javax.swing.JButton Ultimo;
    private javax.swing.JButton Volver;
    private javax.swing.JComboBox<String> cliente;
    private javax.swing.JTextField fecha;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField num_pedido;
    // End of variables declaration//GEN-END:variables
}
